Come si può usare la memoria virtuale per far si che programmi diversi non corrompano la memoria l'uno dell'altro?

Innanzitutto ogni processo deve avere la sua PAGE TABLE personale, in quanto un'unica page table di sistema non permetterebbe di 
garantire isolamento (spazio di indirizzamento condiviso -> ad esempio, virtual page number 0x00000 punterebbe alla stessa locazione 
di memoria per tutti i processi). Con una page table personale al processo gli spazi di indirizzamento vengono separati (ad esempio: 
virtual page number 0x00000 potrebbe puntare alla pagina fisica 0x0000A per il processo A mentre a 0x0000B per il processo B).

Questo separazione garantisce isolamento ed evita che un processo possa accedere direttamente alla memoria di un altro processo.
    -> in page table diverse, mapping diversi per lo stesso indirizzo virtuale 
    -> stesso mapping se si vuole condividere memoria
Inoltre, una tabella delle pagine personale permette a ciascun processo di avere lo stesso intervallo di indirizzi virtuali, senza
che questo causi conflitti tra processi, poiché il sistema operativo traduce questi indirizzi virtuali in indirizzi fisici in maniera
indipendente per ciascun processo.

--- SPAZIO DI INIDIRIZZAMENTO DI UN PROCESSO IN LINUX
in una macchina a 32 bit, OGNI processo vede uno spazio di indirizzamento grande 4GiB che comprende le seguenti componenti. 
    -> L'ultimo GiB è riservato al kernel e non è accessibile ai programmi utente
    -> Successivame si trova lo stack del processo, che cresce verso il basso
    -> Poi troviamo delle librerie, che potrebbero essere anche condivise
    -> Poi troviamo l'heap, che cresce verso l'alto
    -> Poi troviamo l'area Data, che contiene costanti, variabili globali, ecc.
    -> Infine abbiamo l'area Text, ovvero quella del codice del processo 
    -> (All'inizio dello spazio di indirizzamento troviamo anche 128MiB di spazio riservato per operazioni di I/O) 

con la memoria virtuale ogni processo mappa queste aree del loro spazio di indirizzamento in aree distinte (o non in caso di
condivisione). Ad esempio:
    - L'area riservata al kernel viene condivisa tra tutti i processi (stesso mapping in memoria fisica)
    - Stack, Text e Data di ogni programma invece, vengono mappati in aree fisiche diverse
    NB: mediante questi mapping è facile condividere memoria, per esempio tutti i thread di un processo potrebbero avere accesso alla
    stessa heap. 

--- PROTEZIONE MEDIANTE SEGMENTAZIONE
Sebbene la paginazione sia un meccanismo molto utile per gestire la memoria virtuale, essa da sola non è sempre sufficiente a soddisfare
tutte le esigenze di gestione della memoria. Per questo motivo, viene spesso combinata con la segmentazione. La combinazione di questi
due approcci, detta segmentazione paginata, offre vantaggi aggiuntivi e supera alcune limitazioni intrinseche di ciascun metodo.
 
Ecco perché non basta solo la paginazione e perché si utilizza anche la segmentazione:

    1. Gestione logica dei dati
    Paginazione: Suddivide la memoria in blocchi di dimensioni fisse (pagine), che vengono mappati su blocchi fisici di dimensioni
    uguali (frame). Questo è molto efficiente dal punto di vista della gestione della memoria fisica, ma non tiene conto della logica
    applicativa. Per esempio, codice, dati, heap, e stack di un programma sono trattati come un insieme uniforme di pagine senza
    considerare la loro funzione logica.

    Segmentazione: Permette di dividere il programma in segmenti logici come codice, stack, dati, heap, ecc., che riflettono meglio la
    struttura del programma. Ogni segmento può avere dimensioni variabili e corrispondere a una componente specifica del programma.

    La segmentazione offre una gestione della memoria più vicina alla logica del programma, facilitando operazioni come la protezione
    e la condivisione di segmenti (ad esempio, più processi che condividono lo stesso segmento di codice).

    2. Condivisione e protezione della memoria
    Paginazione: Permette una semplice gestione della memoria fisica, ma non facilita facilmente la protezione di specifiche aree di
    memoria, né la condivisione di dati logici tra processi.

    Segmentazione: Poiché i segmenti sono entità logiche ben definite (come codice o dati), è facile assegnare differenti livelli di
    protezione e condividere segmenti tra processi.

    La segmentazione offre maggiore flessibilità nella condivisione e protezione delle risorse logiche del programma rispetto alla
    paginazione.

La combinazione di paginazione e segmentazione permette di sfruttare i vantaggi di entrambi gli approcci: La paginazione garantisce un
uso efficiente della memoria fisica e la riduzione della frammentazione esterna. La segmentazione permette una gestione logica della
memoria ed una migliore protezione e condivisione.

In questo modo, il sistema operativo può gestire lo spazio di indirizzamento virtuale in modo più efficiente, con la segmentazione 
che raggruppa logicamente le parti del programma e la paginazione che gestisce la memoria fisica in modo più uniforme.

Caratteristiche segmentazione paginata:
    • spazio logico segmentato (specialmente per motivi di protezione)
    • ogni segmento suddiviso in pagine
    • eliminazione della frammentazione esterna
    • non necessario mantenere in memoria l’intero segmento, ma è possibile caricare soltanto le pagine necessarie
    